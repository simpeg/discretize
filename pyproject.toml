
[build-system]
build-backend = 'mesonpy'
requires = [
    "meson-python>=0.15.0",
    "Cython>=3.1.0",
    "setuptools_scm[toml]>=6.2",

    # numpy requirement for wheel builds for distribution on PyPI - building
    # against 2.x yields wheels that are also compatible with numpy 1.x at
    # runtime.
    "numpy>=2.0.0rc1",
]

[project]
name = 'discretize'
dynamic = ["version"]
description = 'Discretization tools for finite volume and inverse problems'
readme = 'README.rst'
requires-python = '>=3.11'
authors = [
  {name = 'SimPEG developers', email = 'rowanc1@gmail.com'},
]
keywords = [
    'finite volume', 'discretization', 'pde', 'ode'
]

# Note: Python and NumPy upper version bounds should be set correctly in
# release branches, see:
#     https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
dependencies = [
    # TODO: update to "pin-compatible" once possible, see
    # https://github.com/mesonbuild/meson-python/issues/29
    "numpy>=1.22.4",
    "scipy>=1.12",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Cython",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

[project.license]
file = 'LICENSE'

[project.optional-dependencies]
plot = ["matplotlib"]
viz = ["vtk>=6", "pyvista"]
omf = ["omf"]
all = ["discretize[plot,viz,omf]"]
doc = [
    "sphinx==8.1.3",
    "pydata-sphinx-theme==0.16.1",
    "sphinx-gallery==0.19.0",
    "numpydoc==1.9.0",
    "jupyter",
    "graphviz",
    "pillow",
    "pooch",
    "discretize[all]",
]
test = [
    "pytest",
    "pytest-cov",
    "sympy",
    "discretize[doc,all]",
]
# when changing these, make sure to keep it consistent with .pre-commit-config.
style = [
    "ruff=0.14.0",
]
build = [
    "meson-python>=0.14.0",
    "meson",
    "ninja",
    "numpy>=1.22.4",
    "cython>=3.1.0",
    "setuptools_scm",
]

[project.urls]
Homepage = 'https://simpeg.xyz'
Documentation = 'https://discretize.simpeg.xyz'
Repository = 'http://github.com/simpeg/discretize.git'

[tool.setuptools_scm]

[tool.cibuildwheel]
# skip building wheels for python 3.6, 3.7, 3.8, 3.9, all pypy versions, and specialty linux
# processors (still does arm builds though).
# skip windows 32bit
skip = "cp38-* cp39-* cp310-* *_ppc64le *_i686 *_s390x *-win32 cp310-win_arm64"
build-verbosity = 3
enable = ["cpython-freethreading"]

# test importing discretize to make sure externals are loadable.
test-command = 'python -c "import discretize; print(discretize.__version__)"'


# use the visual studio compilers
[tool.cibuildwheel.windows.config-settings]
setup-args = [
    '--vsenv'
]

[tool.coverage.run]
branch = true
source = ["discretize", "tests", "examples", "tutorials"]
# plugins = [
#     "Cython.Coverage",
# ]

[tool.coverage.report]
ignore_errors = false
show_missing = true
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "AbstractMethodError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
[tool.ruff]
required-version='0.14.0'
target-version = 'py311'
#extend-exclude = [
#    'docs/examples/*',
#    'docs/tutorials/*',
#]

[tool.ruff.lint]
extend-ignore = [
    # Do not use variables named 'I', 'O', or 'l'
    'E741',
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = ["E731"]  # Ignore assigning lambdas in tests
"__init__.py" = ["F401"]  # Ignore unused import in __init__.py

[tool.ruff.lint.pydocstyle]
convention = "numpy"
